NAME : JAYAPRAKASH S
LetsGrowMore - VIP
September-2021

DOMAIN: DATASCIENCE

Task 1 - Iris Flower Classification ML Project
This particular ML project is usually referred to as the “Hello World” of Machine Learning. The iris flowers dataset contains numeric attributes, and it is perfect for beginners to learn about supervised ML algorithms, mainly how to load and handle data. Also, since this is a small dataset, it can easily fit in memory without requiring special transformations or scaling capabilities.

# Importing the required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

#Reading the dataset
url = "iris.data"
names = ['Sepal length','Sepal width','Petal length','Petal width','Class']
df = pd.read_csv(url,names=names)
df.head()

#Structure of the dataset
df.shape

#datatypes in a dataset
df.dtypes

#checking null values
df.isnull().sum()

#frequency table
df['Class'].value_counts()

#Scatter Plot
colors = ['magenta','grey','orange']
Species = ['Iris-setosa','Iris-virginica','Iris-versicolor']

#plotting between sepal length & Sepal width
for i in range(3):
    x=df[df['Class']== Species[i]]
    plt.scatter(x['Sepal length'],x['Sepal width'],c=colors[i],label=Species[i])
    plt.xlabel('Sepal length')
    plt.ylabel('Sepal width')
    plt.legend()
    
#plotting between Petal length & Petal width
for i in range(3):
    x=df[df['Class']== Species[i]]
    plt.scatter(x['Petal length'],x['Petal width'],c=colors[i],label=Species[i])
    plt.xlabel('Petal length')
    plt.ylabel('Petal width')
    plt.legend()
    
#plotting between sepal length & Petal length
for i in range(3):
    x=df[df['Class']== Species[i]]
    plt.scatter(x['Sepal length'],x['Petal length'],c=colors[i],label=Species[i])
    plt.xlabel('Sepal length')
    plt.ylabel('Petal length')
    plt.legend()
    
#plotting between sepal width & Petal width
for i in range(3):
    x=df[df['Class']== Species[i]]
    plt.scatter(x['Sepal width'],x['Petal width'],c=colors[i],label=Species[i])
    plt.xlabel('Sepal width')
    plt.ylabel('Petal width')
    plt.legend()
    
df.corr()

df.replace({'Class':{'Iris-setosa': 1,'Iris-versicolor': 2,'Iris-virginica':3}},inplace=True)
df.head()

#splitting based on independent and dependent features
X = df.iloc[:,:-1]
#X
y = df.iloc[:,-1]
#y

#splitting the datasets into train and test sets
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state = 0)
print("shape of X_train :", X_train.shape)
print("shape of X_test  :", X_test.shape)
print("shape of y_train :", y_train.shape)
print("shape of y_test  :", y_test.shape)

model building

#fitting the logistic Regression
from sklearn.linear_model import LogisticRegression
regressor = LogisticRegression()
regressor.fit(X_train,y_train)

#predicting the test set
y_pred = regressor.predict(X_test)
y_pred

#displaying the predicted and the actual data
table = pd.DataFrame({"Actual":y_test,"Predicted": y_pred})
table.head()

#confusion matrix
cm = metrics.confusion_matrix(y_test,y_pred)
cm

plt.figure(figsize=(8,8))
sns.heatmap(cm,annot = True,cmap="Blues_r")
plt.xlabel("Predicted label",size=15)
plt.ylabel("Acutal label",size = 15)

#accuracy score of Regression model
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)


THANK YOU
